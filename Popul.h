// This class represents a single population with elements of type "indiv"
#include "Indiv.h"

//Declare friend class prototype
class World;



// Declaration of the studyPop class
class Popul {
private:
	
	//vector class indiv; stores all individuals in population
	vector<Indiv> thePop;
	
	//vector class indiv; stores all offspring generated by individuals in thePop when makeOffspring is called
	vector<Indiv> thePopOffspring;
	
	//record number of fixed ben and del mutations
	int fixBen[3];
	int fixDel[3];
	
	//Store fitness measurements
	long double populHighestFitness;
	long double populHighestPDFitness;
	
	//Store mean[0] and var[1] of fitness
	long double populFitness[2];

	//Store mean[0] and var[1] of recomb and selfing rates	
	double populRecombRate[2];
	double populSelfingRate[2];
	
	//Store mean and var with respect to mut group
	//First dimension is mean[0] and var[0], second dimension is mut group [0][1][2]
	double populDel[2][3];
	double populBen[2][3];
	double populDelHomozygous[2][3];
	double populDelHeterozygous[2][3];
	double populBenHomozygous[2][3];
	double populBenHeterozygous[2][3];
	
	//Store mean and var with respect to individual
	double populTotalDel[2];
	double populTotalBen[2];
	double populTotalDelHomozygous[2];
	double populTotalDelHeterozygous[2];
	double populTotalBenHomozygous[2];
	double populTotalBenHeterozygous[2];
	
	//ID of chosen parent 1 and parent 2
	double ID_P1;
	double ID_P2;
	
	
	//*****Eddie MODDED Mar 8 2016
	double vecFixationSize;
	//fixationMatches comes from checkFixations()
	double fixationMatches;
	//*****Eddie MODDED Mar 8 2016
		
	
	
	//*****Eddie MODDED Aug 31 2016
	//neutralGameteIndex contains indices for which neutral allele offspring will inherit from the parental population
	//first dimension(n)	->	focal offspring (0 to N-1)
	//second dimension(l)	->	focal locus (0, 1, 2); there are three neutral loci
	//third dimension(a)	->	focal allele (0, 1); there are two allele per loci
	//fourth dimension(p)	->	first element[0]	-> index of parent passing allele to offspring n's, locus l's allele a (0 to N-1)
	//						->	second element[1]	-> index of allele that offspring will inherit from that parent (0, 1)
	//E.g.	neutralGameteIndex[11][2][1][0] = 44 and neutralGameteIndex[11][2][1][1] = 0
	//			offspring 11's neutral locus 2 allele 1 will inherit parent 44's neutral locus 2 allele 0
	//E.g. 	neutralGameteIndex[5][0][0][0] = 157 and neutralGameteIndex[5][0][0][1] = 1
	//			offspring 5's neutral locus 0 allele 0 will inherit parent 157's neutral locus 0 allele 1
	vector< vector< vector< vector<int> > > > neutralGameteIndex;
	//*****Eddie MODDED Aug 31 2016
	
	
public:
	
	Popul( vector < vector<int> >& groupedLoci, double (&deltaS)[3] );
	
	//Find value of highest fitness and pollen discounted fitness in population
	void findHighestFitness();

	
	//Select first parent for selfing/outcrossing; use indiv fitness
	int pickFirstParent();
	//Select parent for outcrossing; use pollen discounter fitness
	int pickOutcrossParent( int indexParent1 );

	//Create new indiv by selecting for parents (Selection), making gametes (Recombination) and adding new mutations (Mutation)
	void makeOffspring( vector < vector<int> >& groupedLoci, int n );
	
	//Inserts mutations from vMut into vGamete
	void addMutToGamete(vector< vector<int> >& vMut, vector< vector<int> >& vGamete);
	
	//Inserts mutations from vMut into vGamete, checks for errors by comparing to a less efficient algorithm
	void addMutToGameteCheck(vector< vector<int> >& vMut, vector< vector<int> >& vGamete, int& numError);
	
	//Create new generation of individuals
	void makeNewGeneration( vector < vector<int> >& groupedLoci);
	
	//Record and remove fixed mutations
	void removeFixations();
	
	//Calculate basic info of population
	void calcRecombRate();
	void calcSelfingRate();
	
	void calcPopulFitness();
	void calcDelMut();
	void calcBenMut();
	void calcDelHeteroHomo();
	
	//*****Eddie MODDED Mar 7 2016
	void checkFixations(vector< vector<int> >& vecFixations);
	//*****Eddie MODDED Mar 7 2016
	
	//*****Eddie MODDED Mar 16 2016
	void addMutation_V4(vector< vector<int> >& Gamete1, vector< vector<int> >& Gamete2, vector< vector<int> >& groupedLoci, int CheckForError);
	//*****Eddie MODDED Mar 16 2016
	

	
	//*****Eddie MODDED Aug 1 2016
	Popul();
	int pickFirstParent_New();
	int pickOutcrossParent_New( int indexParent1 );
	void makeOffspring_New(int n);
	void makeNewGeneration_New();
	//*****Eddie MODDED Aug 1 2016
	
	//*****Eddie MODDED Apr 20 2017
	void addMutation_V4_IGNORE1(vector< vector<int> >& Gamete1, vector< vector<int> >& Gamete2, vector< vector<int> >& groupedLoci, int CheckForError);
	void addMutation_V4_IGNORE2(vector< vector<int> >& Gamete1, vector< vector<int> >& Gamete2, vector< vector<int> >& groupedLoci, int CheckForError);
	//*****Eddie MODDED Apr 20 2017
	
	//class theWorld can access all the information of studyPop
	friend class World;
};
